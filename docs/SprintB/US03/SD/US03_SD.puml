@startuml Sequence Diagram
autonumber
'hide footbox
actor "Receptionist" as RECEPT

participant ":RegisterSNSUserUI" as UI
participant ":RegisterSNSUserController" as CTRL
participant "comp\n:Company" as COMP
participant "store\n:UserStore" as STORE
participant "user\n:User" as USER
participant ":PasswordGenerator" as PWDGEN
participant ":EmailSender" as EMAIL
participant "auth\n:AuthFacade" as AUTH
' participant "lstSnsU\n:List<SNSUser>" as LIST

activate RECEPT
RECEPT -> UI : starts to register a new SNS User
activate UI
UI --> RECEPT : requests data (citizenCard, snsNumber, name, birthDay, gender, phoneNumber, email)
deactivate UI

RECEPT -> UI : types requested data
activate UI

UI --> CTRL : user = createUser(userData)
activate CTRL

CTRL --> COMP : store = getUserStore()
activate COMP
deactivate COMP

CTRL --> STORE : user = createUser()
activate STORE

STORE --> USER** : createUser()

deactivate STORE

CTRL --> STORE : validateUser(user)
activate STORE

STORE --> USER : email = getEmail(user)
activate USER
deactivate USER

STORE --> AUTH : existsUser(email)
activate AUTH
deactivate AUTH

STORE --> STORE : checkDuplicates(user)
activate STORE
deactivate STORE

deactivate STORE
deactivate CTRL

UI --> RECEPT : shows data and asks for confirmation
deactivate UI


RECEPT --> UI : confirms the data
activate UI

UI --> CTRL : saveUser()
activate CTRL

CTRL --> STORE : saveUser(user)
activate STORE

STORE --> STORE : validateUser(user)
activate STORE
deactivate STORE

STORE --> USER : name = user.getName()
activate USER
deactivate USER

STORE --> USER : email = user.getEmail()
activate USER
deactivate USER

STORE --> PWDGEN : pwd = generatePwd()
activate PWDGEN
deactivate PWDGEN

STORE --> AUTH : addUser(name, email, pwd, "SNS_USER")
activate AUTH
deactivate AUTH

STORE --> EMAIL : sendEmail(email, pwd)
activate EMAIL
deactivate EMAIL

deactivate STORE
deactivate CTRL

UI --> RECEPT : informs operation success
deactivate UI

deactivate RECEPT

@enduml