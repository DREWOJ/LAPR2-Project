@startuml
autonumber
'hide footbox

actor "Timer" as ACT


participant "App" as APP
participant "PropertiesUtils" as PROPSU
participant "props:\nProperties" as PROPS
participant "Company" as COMP
participant "task:\nExportDailyVaccinatedTask" as TASK
participant "timer:\nTimer" as TIMER
participant "vacCenterSt:\nVaccinationCenterStore" as VCST
participant "vacTypeSt:\nVaccineTypeStore" as VTST
participant "center:\nVaccinationCenter" as CENTER
participant "vacAdmin:\nVaccineAdministration" as VACADMIN
participant "vaccine:\nVaccine" as VAC
participant "csvEx:\nCsvExporter" as CSVEX
participant "vacType:\nVaccineType" as VACTYPE
participant "FileUtils" as FILEUTILS
participant "vacAdminList:\nList<VaccineAdministration>" as VALST
participant "dataMap:\nHashMap<VaccinationCenter,\nHashMap<VaccineType,Int>>" as MAP

    activate ACT
    ACT -> APP : Asks to export daily vaccinated report
    activate APP
    APP -> PROPSU : props = getProperties()
    activate PROPSU
    deactivate PROPSU
    APP -> PROPS : filePath = getProperty(Constants.PARAMS_EXPORTATION_PATH)
    activate PROPS
    deactivate PROPS
    APP -> PROPS : time = getProperty(Constants.PARAMS_EXPORTATION_TIME)
    activate PROPS
    deactivate PROPS
    APP -> PROPS : separator = getProperty(Constants.PARAMS_EXPORTATION_SEPARATOR)
    activate PROPS
    deactivate PROPS
    APP-> COMP : scheduleDailyVaccinated(filePath, time, separator, timeInterval)
    deactivate APP
        
        activate COMP
        COMP --> TASK ** : create(filePath, separator, vacCenterSt, vacTypeSt)
        COMP --> TIMER ** : create()

        COMP -> TIMER : scheduleAtFixedRate(task, firstTime, period)
        activate TIMER
        deactivate TIMER

        note right TASK 
            After the time to the specifiede date and time has elapsed
        end note 
        
    deactivate COMP

        TIMER -> TASK : run()
        activate TIMER
        deactivate TIMER
        activate TASK
            TASK -> VCST : centerLst = getVaccinationCenters()
            activate VCST
            deactivate VCST

            TASK -> VTST : vacTypeLst = getVaccineTypes()
            activate VTST
            deactivate VTST

            loop foreach vaccination center
                TASK -> CENTER : vacAdminList = getVacAdminFromYesterdayList()
                activate CENTER
                deactivate CENTER

                loop foreach vaccine administration
                    TASK -> VACADMIN : vaccine = getVaccine()
                    activate VACADMIN
                    deactivate VACADMIN

                    TASK -> VAC : vacType = getVacType()
                    activate VAC
                    deactivate VAC
                end
            end

            TASK -> TASK : content = convertToString(centerLst, vacTypeLst, dataMap)
            activate TASK
                loop foreach vacType
                    TASK -> VACTYPE : getDescription()
                    activate VACTYPE
                    deactivate VACTYPE
                end
                loop foreach center
                    TASK -> CENTER : getName()
                    activate CENTER
                    deactivate CENTER
                end
            deactivate TASK
            TASK -> FILEUTILS : writeToFile(filepath, content)
            activate FILEUTILS
            deactivate FILEUTILS

        deactivate TASK

        note right TASK 
            After period has elapsed the task will be runned again (message 6)
        end note 
        TIMER -> TASK : run()
        activate TIMER
        deactivate TIMER
        activate TASK

@enduml 