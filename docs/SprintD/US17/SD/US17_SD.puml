@startuml US17_SD
autonumber

actor "Center Coordinator" as COORDINATOR

participant ":CoordinatorUI" as CUI
participant ":ImportLegacyDataUI" as UI
participant "App" as _APP
participant "app:App" as APP
participant ":ImportLegacyDataController" as CTRL
participant "empSess:employeeSession" as SESSION
participant "comp:Company" as COMPANY
participant "csvReader:CSVReader" as CSVREADER
participant ":ICSVReader" as ICSV
participant "snsUserStore:SNSUserStore" as SNSSTORE
participant "snsUser:SNSUser" as SNSUSER
participant "center:VaccinationCenter" as CENTER
participant "vacStore:VaccineStore" as VACCINESTORE
participant "vaccine:Vaccine" as VACCINE
participant "administrationList:AdministrationList" as ADLST
participant "waitingRoom:WaitingRoom" as WR
participant "aptSchLst:AppointmentScheduleList" as APTSCHLST
participant "centerEventList:CenterEventList" as CELIST
participant ":LegacyDataMapper" as MAPPER
participant "legacyDataDto:LegacyDataDTO" as DTO
participant "legacyDtoList:List<LegacyDataDTO>" as LIST_DTOS
participant "appointment:Appointment" as APT
participant "arrival:Arrival" as ARRIVAL
participant "administration:Administration" as ADMINISTRATION
participant "fileData:List<String[]>" as LIST_FILEDATA

activate COORDINATOR
  ref over COORDINATOR
    ' !include ../../CoordinatorLogin_SD.puml!
    ' ![[../../CoordinatorLogin_SD.puml]]
    ' ![[../../CoordinatorLogin_SD.svg]]
    CoordinatorLogin_SD
  end ref

  activate CUI
  COORDINATOR -> CUI : starts the process of importing data from a legacy system

      note right of CUI
        employeeSession has <i><b>center</b></i> obtained 
        during Coordinator login.
      end note

      |||

    CUI -> SESSION : center = getVaccinationCenter()
    activate SESSION
    deactivate SESSION

    CUI -> UI ** : create(center)
    activate UI

      UI -> _APP : app = getInstance()
      activate _APP
      deactivate _APP

      UI -> APP : company = getCompany()
      activate APP
      deactivate APP

      UI -> CTRL ** : create(company, center)
      activate CTRL
        CTRL -> COMPANY : snsUserStore = getSNSUserStore()
        activate COMPANY
        deactivate COMPANY
      deactivate CTRL
      
      COORDINATOR <-- UI : asks for the file that should be loaded
    deactivate UI

    COORDINATOR -> UI : selects the file
    activate UI
    
      ' read data

      UI -> CTRL : fileData = read(filepath)
      activate CTRL
        CTRL -> CSVREADER ** : create(filepath)

        CTRL -> CSVREADER : read()
        activate CSVREADER
          CSVREADER -> ICSV ** : newInstance(filepath)
          CSVREADER -> ICSV : read(fileData)
          activate ICSV
          deactivate ICSV
        deactivate CSVREADER

      deactivate CTRL

      ' process data
      UI -> CTRL : legacyDtoList = convert(fileData)
      activate CTRL
        loop for each entry in fileData
          CTRL -> MAPPER : dto = toDto(entry)
          activate MAPPER
            MAPPER -> DTO : create(snsNumber, vaccineName, dose, lotNumber, scheduledDate, arrivalDate, administrationDate, leavingDate)
            activate DTO
            deactivate DTO
          deactivate MAPPER

          CTRL -> LIST_DTOS : add(dto)
          activate LIST_DTOS
          deactivate LIST_DTOS
        end
      deactivate CTRL

      UI -> CTRL : validate(legacy)
      activate CTRL
        loop for each legacyDataDto in legacyDtoList
          CTRL -> DTO : snsNumber = getSNSNumber()
          activate DTO
          deactivate DTO

          CTRL -> SNSSTORE : b = findSNSUserByNumber(snsNumber)
          activate SNSSTORE
          deactivate SNSSTORE
        end
      deactivate CTRL

      UI -> CTRL : sort(legacy)
      activate CTRL
      deactivate CTRL

      ' convert to list dto and send it to ui

      COORDINATOR <-- UI : opens the file and shows data sorted
    deactivate UI

    COORDINATOR -> UI : confirms the data
    activate UI
      UI -> CTRL : save(legacy)
      activate CTRL
        CTRL -> COMPANY : vacStore = getVaccineStore()
        activate COMPANY
        deactivate COMPANY

        CTRL -> CENTER : aptSchLst = getAppointmentScheduleList()
        activate CENTER
        deactivate CENTER

        CTRL -> CENTER : wrLst = getWaitingRoomList()
        activate CENTER
        deactivate CENTER

        CTRL -> CENTER : centerEventList = getCenterEventList()
        activate CENTER
        deactivate CENTER

        loop for each legacyDataDto in legacyDtoList
          ' get data from dto
          CTRL -> DTO : snsNumber = getSNSNumber()
          activate DTO
          deactivate DTO

          CTRL -> DTO : vaccineName = getVaccineName()
          activate DTO
          deactivate DTO

          CTRL -> DTO : doseNumber = getDoseNumber()
          activate DTO
          deactivate DTO

          CTRL -> DTO : lotNumber = getLotNumber()
          activate DTO
          deactivate DTO

          CTRL -> DTO : arrivalDate = getArrivalDate()
          activate DTO
          deactivate DTO

          CTRL -> DTO : scheduledDate = getScheduledDate()
          activate DTO
          deactivate DTO

          CTRL -> DTO : administratedDate = getAdministratedDate()
          activate DTO
          deactivate DTO
          
          CTRL -> DTO : departureDate = getDepartureDate()
          activate DTO
          deactivate DTO

          ' get the snsUser
          CTRL -> SNSSTORE : snsUser = findSNSUserByNumber(snsNumber)
          activate SNSSTORE
          deactivate SNSSTORE

          ' get his administration list
          CTRL -> SNSUSER : administrationList = getAdministrationList()
          activate SNSUSER
          deactivate SNSUSER
          
          ' get the vaccine
          CTRL -> VACCINESTORE : vaccine = getVaccineByName()
          activate VACCINESTORE
          deactivate VACCINESTORE

          ' create appointment
          ' TODO: use DTO
          CTRL -> APTSCHLST : createAppointment(snsUser, scheduledDate, vacTypeDto, false)
          activate APTSCHLST
          deactivate APTSCHLST

          ' validate
          CTRL -> APTSCHLST : validate(appointment)
          activate APTSCHLST
          deactivate APTSCHLST

          ' save
          CTRL -> APTSCHLST : validate(appointment)
          activate APTSCHLST
          deactivate APTSCHLST

          ' create arrival
          CTRL -> WR : createArrival(appointment)
          activate WR
          deactivate WR

          ' save
          CTRL -> WR : saveArrival(arrival)
          activate WR
          deactivate WR

          ' create administration
          CTRL -> ADLST : administration = create(vaccine, lotNumber, doseNumber, administrationDate)
          activate ADLST
          deactivate ADLST

          CTRL -> ADLST : save(administration)
          activate ADLST
          deactivate ADLST

          ' create center events
          CTRL -> CELIST : centerEventArrival = create(arrivalDate, ARRIVAL, snsUser)
          activate CELIST
          deactivate CELIST

          CTRL -> CELIST : centerEventVaccinated = create(administrationDate, VACCINATED, snsUser)
          activate CELIST
          deactivate CELIST

          CTRL -> CELIST : centerEventDeparted = create(departureDate, DEPARTED, snsUser)
          activate CELIST
          deactivate CELIST

          ' save
          CTRL -> CELIST : save(centerEventArrival)
          activate CELIST
          deactivate CELIST

          CTRL -> CELIST : save(centerEventVaccinated)
          activate CELIST
          deactivate CELIST

          CTRL -> CELIST : save(centerEventDeparted)
          activate CELIST
          deactivate CELIST

        end
      deactivate CTRL
      COORDINATOR <-- UI : informs operation success
    deactivate UI

  deactivate CUI
deactivate COORDINATOR
@enduml
