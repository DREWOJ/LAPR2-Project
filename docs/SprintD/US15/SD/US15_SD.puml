@startuml US15_SD

actor "Center Coordinator" as COORDINATOR

participant ":ExportCenterStatisticsUI" as UI
participant ":App" as APP
participant ":ExportCenterStatisticsController" as CTRL
participant ":Company" as COMP
participant "fullyVaccinatedData\n:FullyVaccinatedData" as FULLYDATA
participant "vaccineAdministration\n:VaccineAdministration" as VACADMIN
participant "adminProcess\n:AdminProcess" as ADMINPROC
participant "employeeSession\n:EmployeeSession" as EMPLOYEESESSION
participant "vaccinationCenter\n:VaccinationCenter" as CENTER
participant "vaccineAdministrationList\n:List<VaccineAdministration>" as VACADMINLIST
participant "vaccineAdministrationDayList\n:List<VaccineAdministration>" as VACDAYLIST
participant "vaccine\n:Vaccine" as VACCINE
participant "map\n:Map<String,Integer>" as MAP
participant "csvexporter\n:CsvExporter" as CSVEXPORTER

activate COORDINATOR
COORDINATOR -> UI : asks to export center statistics
activate UI

UI -> APP : comp = app.getCompany()
activate APP
deactivate APP

ref over UI 
**coordinatorSession** is obtained through the coordinatorSession
See here: CoordinatorLogin_SD.svg
end ref

UI --> CTRL** : create(company,coordinatorSession)

UI --> COORDINATOR : requests data (filePath,startDate,endDate)
deactivate UI

COORDINATOR -> UI : types requested data
activate UI

UI -> CTRL : createCsvExporter(filePath,startDate,endDate)
activate CTRL

CTRL -> EMPLOYEESESSION : center = getVaccinationCenter()
activate EMPLOYEESESSION
deactivate EMPLOYEESESSION

CTRL --> FULLYDATA** : exporterCsv = create(filePath,startDate,endDate,center)

loop for each day between timeInterval selected
note over FULLYDATA
inicialy day refers to the startDate, after iterations this increases by one
until it reaches the endDate
end note

activate FULLYDATA

FULLYDATA -> CENTER : vacAdminList = getVacAdminDayList(day)
activate CENTER
deactivate CENTER

loop for each vaccineAdministration in vaccineAdministrationList

FULLYDATA -> VACADMIN :  snsUserAge = getSNSUserAge()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACADMIN : vaccine = getVaccine()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACCINE : vacType = getVacType()
activate VACCINE
deactivate VACCINE

FULLYDATA -> VACADMIN : dose = getDose()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACCINE : adminProcByAge = vaccine.getAdminProc(snsUserAge)
activate VACCINE
deactivate VACCINE

FULLYDATA -> VACCINE : fullyVaccinated = checkUserFullyVaccinated(snsUserAge,dose)
activate VACCINE
deactivate VACCINE

opt (fullyVaccinated == true) 
FULLYDATA -> MAP : data.put(vacType,1)
activate MAP
deactivate MAP
end

deactivate CTRL
end
end

FULLYDATA -> CSVEXPORTER** : saveData(filePath,map)
activate CSVEXPORTER
deactivate FULLYDATA

note over CSVEXPORTER
file refers to a object File
bf refers to a object BufferedWriter
end note
CSVEXPORTER -> CSVEXPORTER : file = new File(filePath)
CSVEXPORTER -> CSVEXPORTER : bf =  new BufferedWriteer(new FileWriter(file))
loop for each content of the map 
CSVEXPORTER -> CSVEXPORTER : bf.write(entry.getKey() + ":" + entry.getValue())
CSVEXPORTER -> CSVEXPORTER : bf.newLine()
activate CSVEXPORTER
deactivate CSVEXPORTER
end
CSVEXPORTER -> CSVEXPORTER : bf.flush()

CSVEXPORTER -> CSVEXPORTER : bf.close()

UI --> COORDINATOR : informs operation success
deactivate CSVEXPORTER

deactivate COORDINATOR 

@enduml