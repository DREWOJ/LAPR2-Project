@startuml US15_SD

actor "Center Coordinator" as COORDINATOR

participant ":ExportCenterStatisticsUI" as UI
participant "APP" as APPCLASS
participant "app:App" as APPINSTANCE
participant ":ExportCenterStatisticsController" as CTRL
participant ":Company" as COMP
participant "fullyVaccinatedData\n:FullyVaccinatedData" as FULLYDATA
participant "vaccineAdministration\n:VaccineAdministration" as VACADMIN
participant "employeeSession\n:EmployeeSession" as EMPLOYEESESSION
participant "vaccinationCenter\n:VaccinationCenter" as CENTER
participant "vaccineAdministrationList\n:List<VaccineAdministration>" as VACADMINLIST
participant "vacAdminList\n:List<VaccineAdministration>" as VACDAYLIST
participant "vaccine\n:Vaccine" as VACCINE
participant "adminProcByAge\n:AdminProcess" as ADMINPROC
participant "doseInfoLst\n:DoseInfoList" as DI_LIST
participant "dataMap\n:Map<String,Integer>" as MAP
participant "csvexporter\n:CsvExporter" as CSVEXPORTER


activate COORDINATOR
COORDINATOR -> UI : asks to export center statistics
activate UI

UI -> APPCLASS : app = app.getInstacne()
activate APPCLASS
deactivate APPCLASS

UI -> APPINSTANCE : company = app.getCompany()
activate APPINSTANCE
deactivate APPINSTANCE

ref over UI 
**coordinatorSession** is obtained through the coordinatorSession
See here: CoordinatorLogin_SD.svg
end ref

UI --> CTRL** : create(company,coordinatorSession)

UI --> COORDINATOR : requests data (filePath,startDate,endDate)
deactivate UI

COORDINATOR -> UI : types requested data
activate UI

UI -> CTRL : createCsvExporter(filePath,startDate,endDate)
activate CTRL

CTRL -> EMPLOYEESESSION : center = getVaccinationCenter()
activate EMPLOYEESESSION
deactivate EMPLOYEESESSION

CTRL --> FULLYDATA** : create(filePath,startDate,endDate,center)

CTRL -> FULLYDATA : dataMap = getFullyVaccinatedUsersPerDayMap()
loop for each day between startDate and endDate selected
activate FULLYDATA

FULLYDATA -> CENTER : vacAdminList = getVacAdminDayList(day)
activate CENTER
deactivate CENTER

loop for each vaccineAdministration in vaccineAdministrationList

FULLYDATA -> VACADMIN :  snsUserAge = getSNSUserAge()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACADMIN : vaccine = getVaccine()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACADMIN : dose = getDose()
activate VACADMIN
deactivate VACADMIN

FULLYDATA -> VACCINE : fullyVaccinated = checkUserFullyVaccinated(snsUserAge,dose)
activate VACCINE

VACCINE -> VACCINE : adminProcByAge = getAdminProc(snsUserAge)
activate VACCINE
deactivate VACCINE

VACCINE -> ADMINPROC : doseInfoLst = getDoseInfoList()
activate ADMINPROC
deactivate ADMINPROC

VACCINE -> DI_LIST : size = getSize()
activate DI_LIST
deactivate DI_LIST
deactivate VACCINE

opt fullyVaccinated == true
FULLYDATA -> FULLYDATA : nOfFullyVaccinated += 1
activate FULLYDATA
deactivate FULLYDATA
end
end

FULLYDATA -> MAP : put(day, nOfFullyVaccinated)
activate MAP
deactivate MAP

end

deactivate FULLYDATA

CTRL -> CSVEXPORTER** : create(filePath)

CTRL -> CSVEXPORTER : saveData(dataMap)
activate CSVEXPORTER
deactivate CSVEXPORTER
deactivate CTRL

deactivate COORDINATOR 

@enduml