@startuml
autonumber

actor "Receptionist" as RECEPT

participant ":RegisterSNSUserArrivalUI" as UI
participant ":RegisterSNSUserArrivalController" as CTRL
participant "comp:Company" as COMP
participant "snsStore:SNSUserStore" as SUSTORE
participant "snsUser:SNSUser" as SNSUSER
participant "center:VaccinationCenter" as CENTER
participant "appointments:AppointmentStore" as APPTS
participant "apt:Appointment" as APT
participant "Mapper<Calendar, Appointment[][]>" as MAPPER
participant "waitingRoomList:WaitingRoomList" as WRLST
participant "arrival:Arrival" as ARRIVAL

activate RECEPT
  RECEPT -> UI : starts to register the SNS User arrival to the vaccination center
  activate UI
  
  RECEPT <-- UI : asks for the SNS User number
  deactivate UI

  RECEPT -> UI : types the requested data
  activate UI
    
    UI -> CTRL** : create(company, center)

    UI -> CTRL : findSNSUserByNumber(snsNumber)
    activate CTRL

      CTRL -> COMP : snsStore = getSNSUserStore()
      activate COMP
      deactivate COMP

      CTRL -> SUSTORE : findSNSUser(snsNumber)
      activate SUSTORE
        ' loop for each snsUser
        loop while b is false
          SUSTORE -> SNSUSER : b = hasSNSNumber(snsNumber)
          activate SNSUSER
          ' alt b == true
            ' SUSTORE <-- SNSUSER : return snsUser
          deactivate SNSUSER
          ' end
        end
      deactivate SUSTORE

    deactivate CTRL

    UI -> CTRL : findSNSUserAppointment()
    activate CTRL

      CTRL -> CENTER : appointments = getAppointmentList()
      activate CENTER
      deactivate CENTER

      CTRL -> SNSUSER : snsNumber = getSnsNumber()
      activate SNSUSER
      deactivate SNSUSER

      CTRL -> APPTS : appointment = hasAppointmentToday(snsNumber)
      activate APPTS

        note right of APPTS
          today is an instance of Calendar
        end note
        APPTS -> APPTS : key = generateKeyFromDate(today)
        
        APPTS -> MAPPER : get(key)
        activate MAPPER
        deactivate MAPPER

        ' loop for each appointment
        loop while b is false
          APPTS -> APT : b = hasSNSNumber(snsNumber)
          activate APT
          ' alt b == true
            ' APPTS <-- APT : return apt
          deactivate APT
          ' end
        end

      deactivate APPTS

    deactivate CTRL

    UI -> CTRL : create()
    activate CTRL

      CTRL -> CENTER : waitingRoomList = getWaitingRoomList()
      activate CENTER
      deactivate CENTER

      CTRL -> WRLST : createArrival(snsNumber)
      activate WRLST
        WRLST -> ARRIVAL** : create(snsUser)
      deactivate WRLST

    deactivate CTRL
  
  RECEPT <-- UI : asks for confirmation for the appointment
  deactivate UI

  RECEPT -> UI : confirms the data
  activate UI

    UI -> CTRL : confirmAppointment(apt)
    activate CTRL

      CTRL -> WRLST : add(arrival)
      activate WRLST
      deactivate WRLST

    deactivate CTRL

  RECEPT <-- UI : informs operation success
  deactivate UI

deactivate RECEPT

@enduml