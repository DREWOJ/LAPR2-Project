@startuml US01_SD
autonumber
' hide footbox
actor "SNS User" as user

participant ":ScheduleVaccineUI" as ui
participant "App" as app
participant "app:\nApp" as appInstance
participant ":ScheduleVaccineController" as controller
participant "company\n:Company" as company
participant "appointmentStore\n:AppointmentStore" as appointmentStore
participant "appointment\n:Appointment" as appointment
participant ":SMSSender" as smsSender
participant "vaccinationCenterStore\n:VaccinationCenterStore" as vacCenterStore
participant "vaccineTypeStore\n:VaccineTypeStore" as vacTypeStore
participant "vaccinationCenter\n:VaccinationCenter" as vacCenter
participant "availableVaccinationCenters\n:List<VaccinationCenter>" as vacCenterList
participant "appointmentScheduleList\n:AppointmentScheduleList" as appointmentScheduleList
participant "vaccine\n:Vaccine" as vaccine
participant "vaccineStore\n:VaccineStore" as vaccineStore
participant "snsUser\n:SNSUser" as snsUser
participant "healthData\n:HealthData" as healthData
participant "snsUserStore\n:SNSUserStore" as snsUserStore
participant "userSession\n:UserSession" as userSession
participant ":VaccineTypeMapper" as vacTypeMapper
participant ":VaccinationCenterMapper" as vacCenterMapper
participant ":AppointmentDto" as appointmentDto
participant ":TimeUtils" as timeUtils
participant "vaccineTypes\n:List<VaccineType>"
participant "vaccineTypesDto\n:List<VaccineTypeDto>"
participant "availableVaccinationCentersDto\n:List<VaccinationCenterDto>"

activate user

user -> ui : asks to schedule a vaccine

activate ui
    ui -> app : app = getInstance()
    activate app
    deactivate app
    ui -> appInstance : company = getCompany()
    activate appInstance
    deactivate appInstance
    ui -> appInstance : userSession = getCurrentUserSession()
    activate appInstance
    deactivate appInstance
    ui -> controller** : create(company, userSession)
    activate controller
      controller -> userSession : email = getUserId()
      activate userSession
      deactivate userSession
      controller -> company : snsUserStore = getSnsUserStore()
      activate company
      deactivate company
      controller -> snsUserStore : snsUser = findSnsUserByEmail(email)
      activate snsUserStore
      deactivate snsUserStore
    deactivate controller
    ui -> controller : suggestedVaccineType = getSuggestedVaccineType()
    activate controller
      controller -> company : vaccineTypeStore = getVaccineTypeStore()
      activate company
      deactivate company
      controller -> company : vaccineTypeCode = getOngoingOutbreakVaccineTypeCode()
      activate company
      deactivate company
      controller -> vacTypeStore : vaccineType = getVaccineTypeByCode()
      activate vacTypeStore
      deactivate vacTypeStore
      controller --> ui : vaccineType
    deactivate controller
    ui --> user : shows suggested vaccine type and asks to accept it
deactivate ui

user -> ui : accepts the suggested vaccine type

activate ui
  ui -> controller : checkAdministrationProcessForVaccineType(vaccineType)
  activate controller
    controller -> snsUser : birthDay = getBirthDay()
    activate snsUser
    deactivate snsUser
    controller -> timeUtils : age = calculateAge(birthDay)
    activate timeUtils
    deactivate timeUtils
    controller -> company : vaccineStore = getVaccineStore()
    activate company
    deactivate company
    controller -> vaccineStore : areVaccinesWithValidAdminProcessWithVaccineType(age, vaccineType)
    activate vaccineStore
    deactivate vaccineStore
    controller --> ui : true/false
  deactivate controller
  opt declines the suggested vaccine type or message 21 returns false
    ui -> controller : getListOfVaccineTypes()
    activate controller
      controller -> company : vaccineTypeStore = getVaccineTypeStore()
      activate company
      deactivate company
      controller -> vacTypeStore : vaccineTypes = getVaccineTypes()
      activate vacTypeStore
      deactivate vacTypeStore
      controller -> vacTypeMapper : vaccineTypesDto = toDto(vaccineTypes)
      activate vacTypeMapper
      deactivate vacTypeMapper
      controller --> ui : vaccineTypesDto
      
    deactivate controller
    ui --> user : shows a list of all vaccine types and asks to select one
    deactivate ui
    user -> ui : selects a vaccine type
    activate ui
  end
  ui -> controller : checkAdministrationProcessForVaccineType(vaccineType)
  activate controller 
    controller -> vaccineStore : areVaccinesWithValidAdminProcessWithVaccineType(age, vaccineType)
    activate vaccineStore
    deactivate vaccineStore
  deactivate controller
  ui -> controller : userHasAppointmentForVaccineType(vaccineType)
  activate controller 
    controller -> snsUser : hasAppointmentForVaccineType(vaccineType)
    activate snsUser
      snsUser -> healthData : hasAppointmentForVaccineType(vaccineType)
      activate healthData
      deactivate healthData
    deactivate snsUser
  deactivate controller
  ui -> controller : getListOfVaccinationCentersWithVaccineType(vaccineType)
  activate controller
    controller -> company : vaccinationCenterStore = getVaccinationCenterStore()
    activate company
    deactivate company
    controller -> vacCenterStore : getListOfVaccinationCentersWithVaccineType(vaccineType)
    activate vacCenterStore
      vacCenterStore -> vacCenterList** 
      loop for each vaccinationCenter
        alt vaccinationCenter instanceOf CommunityMassVaccinationCenter == true
          vacCenterStore -> vacCenter : a = administersVaccineType(vaccineType)
          activate vacCenter
          deactivate vacCenter
          opt a == true
            vacCenterStore --> vacCenterList : add(vaccinationCenter)
            activate vacCenterList
            deactivate vacCenterList
          end
        else else (vaccinationCenter instanceOf HealthCareCenter == true)
          vacCenterStore --> vacCenterList : add(vaccinationCenter)
          activate vacCenterList
          deactivate vacCenterList
        end
      end
      vacCenterStore -> vacCenterMapper : availableVaccinationCentersDto = toDto(availableVaccinationCenters)
      activate vacCenterMapper
      deactivate vacCenterMapper
    deactivate vacCenterStore
    controller --> ui : availableVaccinationCentersDto
  deactivate controller
  ui --> user : shows a list of all available vaccination centers and asks to select one
deactivate ui

user -> ui : selects a vaccination center

activate ui
 ui --> user : requests data (date, time)
deactivate ui

user -> ui : types requested data

activate ui
  ui -> controller : isCenterOpenAt(vaccinationCenter, time)
  activate controller
    controller -> vacCenter : isOpenAt(time)
    activate vacCenter
    deactivate vacCenter
  deactivate controller
  ui -> controller : hasSlotAvailability(vaccinationCenter, dateAndTime)
  note right
    dateAndTime represents a Calendar object
    containing the date and time inserted by the user
  end note
  activate controller
    controller -> vacCenter : hasSlotAvailability(dateAndTime)
    activate vacCenter
      vacCenter -> appointmentScheduleList : checkSlotAvailability(dateAndTime)
      activate appointmentScheduleList
      deactivate appointmentScheduleList
    deactivate vacCenter
  deactivate controller
  ui --> user : asks permission to send sms about the scheduled vaccine
deactivate ui

