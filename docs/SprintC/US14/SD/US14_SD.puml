@startuml
autonumber
'hide footbox
actor "Administrator" as ADM

participant ":UploadUserFromFileUI" as UI
participant ":RegisterSNSUserController" as CTRL
participant "svgR:SVGReader" as SVGR
participant "userSt :SNSUserStore" as USR_STR
participant "comp :Company" as COMP
participant "mapper: SNSUserMapper" as MAPPER
participant "dto: SNSUserDto" as DTO
participant "user :SNSUser" as USR
participant ":PasswordGenerator" as PWDGEN
participant "auth :AuthFacade" as AUTH


activate ADM
ADM -> UI : asks to load users from a file
activate UI
UI --> ADM : requests data (file path name)
deactivate UI

ADM -> UI : types requested data
activate UI

    UI -> CTRL : svgReader = createSvgReader(filePathName)
    activate CTRL
        CTRL -> SVGR ** : svgReader = create(filePathName)
        activate SVGR
            SVGR -> SVGR : validatePath()
            activate SVGR
            deactivate SVGR
            SVGR -> SVGR : validateFile()
            activate SVGR
            deactivate SVGR 
        deactivate SVGR
    deactivate CTRL

UI --> ADM : asks to confirm action
deactivate UI

ADM -> UI : confirms action
activate UI

    UI -> CTRL : svgReader.readAndUpload()
    activate CTRL
        CTRL -> SVGR : svgReader.readAndUpload()
        activate SVGR
            SVGR -> SVGR : separator = getFileSeparator()
            activate SVGR
            deactivate SVGR
            
            SVGR -> COMP : store = getSNSUserStore()
            activate COMP
            deactivate COMP

            loop for each SNSUser regist
            
                note right of SVGR
                snsUserData implies citizenCard, snsNumber, name, birthDay, phoneNumber, email, address, sex
                end note

                SVGR -> USR_STR : snsUser = createSNSUser(snsUserData)
                activate USR_STR
                    USR_STR -> USR** : create(snsUserData)
                deactivate USR_STR

                SVGR -> USR_STR : validateSNSUser(snsUser)
                activate USR_STR
                    USR_STR -> USR : email = getEmail(snsUser)
                    activate USR
                    deactivate USR

                    USR_STR -> COMP : auth = getAuthFacade()
                    activate COMP
                    deactivate COMP

                    USR_STR -> AUTH : existsUser(email)
                    activate AUTH
                    deactivate AUTH

                    USR_STR -> USR_STR : checkDuplicates(snsUser)
                    activate USR_STR
                    deactivate USR_STR

                deactivate USR_STR

                SVGR -> USR_STR : saveSNSUser(snsUser)
                activate USR_STR

                    USR_STR -> MAPPER : snsUserDto = toDto(snsUser)
                    activate MAPPER

                        MAPPER -> USR : name = snsUser.getName()
                        activate USR
                        deactivate USR

                        MAPPER -> USR : email = snsUser.getEmail()
                        activate USR
                        deactivate USR

                        MAPPER -> PWDGEN : pwd = generatePwd()
                        activate PWDGEN
                        deactivate PWDGEN

                        MAPPER -> DTO ** : create(name, email, pwd, "SNS_USER")

                    deactivate MAPPER

                    USR_STR -> AUTH : addUserWithRole(snsUserDto)
                    activate AUTH
                    deactivate AUTH

                    USR_STR -> USR_STR : addSNSUser(snsUser)
                    activate USR_STR
                    deactivate USR_STR

                deactivate USR_STR

            end
        deactivate SVGR
    deactivate CTRL

UI --> ADM : informs operation success
deactivate UI

deactivate ADM

@enduml