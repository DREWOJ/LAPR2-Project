@startuml
autonumber
'hide footbox
actor "Administrator" as ADM

participant ":UploadUserFromFileUI" as UI
participant ":RegisterSNSUserController" as CTRL
participant "csvR:CSVReader" as CSVR
participant "userSt :SNSUserStore" as USR_STR
participant "comp :Company" as COMP
participant "mapper: SNSUserMapper" as MAPPER
participant "dto: SNSUserDto" as DTO
participant "user :SNSUser" as USR
participant ":PasswordGenerator" as PWDGEN
participant "auth :AuthFacade" as AUTH
participant ":EmailSender" as EMAIl
participant "userDataList :List<Array<String>>" as LIST

activate ADM
ADM -> UI : asks to load users from a file
activate UI
UI --> ADM : requests data (file path name)
deactivate UI

ADM -> UI : types requested data
activate UI

    UI -> CTRL : csvReader = createCsvReader(filePathName)
    activate CTRL
        CTRL -> CSVR ** : csvReader = create(filePathName)
        activate CSVR

            CSVR -> CSVR : validatePath()
            activate CSVR
            deactivate CSVR

            CSVR -> CSVR : validateFile()
            activate CSVR
            deactivate CSVR 

            CSVR -> CSVR : separator = getFileSeparator()
            activate CSVR
            deactivate CSVR
            
            CSVR -> COMP : store = getSNSUserStore()
            activate COMP
            deactivate COMP

        deactivate CSVR
    deactivate CTRL

UI --> ADM : asks to confirm action
deactivate UI

ADM -> UI : confirms action
activate UI

    UI -> CTRL : csvReader.readAndUpload()
    activate CTRL
        loop for each SNSUser regist
        CTRL -> CSVR : userDataList = csvReader.readSNSUserLineData()
        activate CSVR
            
        deactivate CSVR
        CTRL -> USR_STR : registListOfUsers(userDataList)
        activate USR_STR

        loop for each SNSUser regist
        note right of USR_STR
            snsUserData implies citizenCard, snsNumber, name, birthDay, phoneNumber, email, address, sex
        end note
        USR_STR -> USR_STR : snsUser = createSNSUser(snsUserData)
            activate USR_STR
                USR_STR -> USR** : create(snsUserData)
            deactivate USR_STR

            USR_STR -> USR_STR : validateSNSUser(snsUser)
            activate USR_STR
                USR_STR -> USR : email = getEmail(snsUser)
                activate USR
                deactivate USR

                USR_STR -> COMP : auth = getAuthFacade()
                activate COMP
                deactivate COMP

                USR_STR -> AUTH : existsUser(email)
                activate AUTH
                deactivate AUTH

                USR_STR -> USR_STR : checkDuplicates(snsUser)
                activate USR_STR
            deactivate USR_STR

            deactivate USR_STR

            USR_STR -> USR_STR : saveSNSUser(snsUser)
            activate USR_STR

                USR_STR -> MAPPER : snsUserDto = toDto(snsUser)
                activate MAPPER

                    MAPPER -> USR : name = snsUser.getName()
                    activate USR
                    deactivate USR

                    MAPPER -> USR : email = snsUser.getEmail()
                    activate USR
                    deactivate USR

                    MAPPER -> PWDGEN : pwd = generatePwd()
                    activate PWDGEN
                    deactivate PWDGEN

                    MAPPER -> DTO ** : create(name, email, pwd, "SNS_USER")

                deactivate MAPPER

            USR_STR -> AUTH : addUserWithRole(snsUserDto)
            activate AUTH
            deactivate AUTH

            USR_STR -> USR_STR : addSNSUser(snsUser)
            activate USR_STR
            deactivate USR_STR
           
            USR_STR -> EMAIl : sendEmail(email)
      
            activate EMAIl
            deactivate EMAIl

        deactivate USR_STR
        deactivate USR_STR
        end
    deactivate CTRL

UI --> ADM : informs operation success
deactivate UI

deactivate ADM

@enduml