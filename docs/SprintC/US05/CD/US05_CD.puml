@startuml
skinparam classAttributeIconSize 0

class Arrive {
  - Date arriveTime
}

class Company {
  -designation: String
  -authFacade: AuthFacade
  -employeeStore: EmployeeStore
  -employeeRoleStore: EmployeeRoleStore
  
  +Company(designation)

  +getAuthFacade()
  +getEmployeeStore()
  +getEmployeeRoleStore()
}

class CheckWaitingRoomController {
  +getCategories()
  +CheckWaitingRoom(ref,designation,informalDesc,technicalDesc,duration,cost,categoryId)
  +saveTask()
}

class CheckWaitingRoomUI {}

class VaccinationCenter {
  - name: String
  - address: String
  - emailAddress: String
  - phoneNumber: String
  - faxNumber: String
  - websiteAddress: String
  - openingHours: String
  - closingHours: String
  - slotDuration: int
  - maximumVaccinesPerSlot: int
  
  +VaccinationCenter(name,address,emailAddress,phoneNumber,faxNumber,websiteAddress,openingHours,closingHours,slotDuration,maximumVaccinesPerSlot,coordinator)
}

class VaccinationCenterStore {
+createVaccinationCenter(centerData,coordinator)
+validateVaccinatonCenter(center)
+saveVaccinationCenter(center)
+checkDuplicates(center)

-addVaccinationCenter(center)
}

class Employee {
  -id: String 
  -name: String 
  -email: String 
  -phone: String 
  -address: String 
  -citizenCardNumber: int 
  -roleId: String 

  +Employee(name,email,phone,address,citizenCardNumber,roleId)
}

class SNSUser {
  - String citizenCard
  - String snsNumber
  - Date birthDay
  - Char gender
  - String phoneNumber
  - String address
  + SNSUser(citizenCard, snsNumber, name, birthDay, gender, phoneNumber, email, address)
}

class WaitingRoomList {
  +createArrive(...)
  +saveArrive(center)
  -checkDuplicates(center)
}

CheckWaitingRoomUI ..> CheckWaitingRoomController
CheckWaitingRoomController ..> Company

Arrive o-- SNSUser

VaccinationCenter o-- Employee : coordinator
VaccinationCenterStore "1" -- "*" VaccinationCenter : stores >

Company -- VaccinationCenterStore : knows

WaitingRoomList "1" -- "*" Arrive : stores

VaccinationCenter *-- WaitingRoomList

@enduml
